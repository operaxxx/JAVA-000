GC调试分析2
    不同内存大小，不同类型垃圾回收器进行日志分析，日志保存在单独的文件中。
    尝试使用128m，512m，1g，2g，4g，Parallel GC， Serial GC， CMS GC， G1 GC进行比较。

1. 默认Parallel GC
 1) 128m
java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms128m -Xmx128m -Xloggc:gc-info-Parallel128m-%t.log GCLogAnalysis
一共进行了24次GC，其中6次young gc，18次full gc，之后发生了oom异常。
第一次young gc时，young总大小为38400K，占用了32964K，85.84%。此时堆大小为32964K，第一次回收前young区大小就是整个堆大小。回收后young区大小为5113K，回收了27851k，此时young区的状态应该是eden区0k，from区5113k，to区0K。一部分对象晋升到了old区。
接着发生了5次young gc，大概都在young区占用率为了86%左右时触发了young gc，gc效率基本一致，gc时间也差别不大，相差最大只有0.0008左右。直到最后一次young gc，晋升到old区的对象越来越多，占用空间越来越大，young区压缩到了19968K，为之前的52%。
接着是第一次full gc，young区全部回收，old区由71599K变为73348K，总大小为87552K，占用率为83.78%。此时堆大小由76711K变为73348K，回收掉了young区3363K，剩下的1749k晋升到了old区。
之后是17次full，不断重复第一次的过程，old区越来越大，最后一次full gc时，young区占用14827K，总大小为19968K，old区占用87518K，总大小为87552K，old区的剩余内存不够young区对象晋升，没有足够内存分配给下一个对象，发生oom异常。
观察heap区，young区中eden区14848K占用率100%，from区5120K，to区14336K，占用率都是0%，三区大小比例接近3:1:3。
 
 2) 256m
java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms256m -Xmx256m -Xloggc:gc-info-Parallel256m-%t.log GCLogAnalysis
一共进行了47次gc，其中12次young gc，35次full gc，第十次young gc时，发生了一次full gc，在两次young gc后，全部都是full gc，之后发生了oom异常。初始young去为76288K，在第6次young gc时，young区大小压缩到了40448k，随着新产生的对象不断增多，young区从40448K扩大到58368K。观察gc时间，young区占用大小为76044K时，gc时间为0.0045秒，压缩young区后，young区占用为40446K时，gc时间为0.0027。young区的gc时间与young区占用空间大小是正相关的。通过young gc时间与full gc对比，full gc的时间会更长一些。与堆大小128m相比，在堆大小为256m时，发生的gc次数更多。观察heap区，young区中eden区29696K占用率100%，from区28672K，to区28672K，占用率都是0%，三区大小比例接近1:1:1。old区占用了99%。

 3) 512m
java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms512m -Xmx512m -Xloggc:gc-info-Parallel512m-%t.log GCLogAnalysis
将堆内存调整为512m时，并没有发生oom异常。生成对象次数:10072。
一共发生了44次gc，其中27次young gc，17次full gc。前32次gc，young gc与full gc交替进行，在第六次young gc时会压缩young区大小，随着新产生的对象不断增多，young还会慢慢扩大。之后的full gc，一开始young gc回收效率很多，随着old区越来越大。与256m时full gc类型。最后观察heap区信息young区中eden区29696K占用率100%，from区28672K，to区28672K，占用率都是0%，三区大小比例接近1:1:1。old区占用了99%。由此看出，发生heap区oom时，如果无内存泄漏，加大堆内存可以减少oom的出现。

 4）1g
java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms1g -Xmx1g -Xloggc:gc-info-Parallel1g-%t.log GCLogAnalysis
执行结束!共生成对象次数:19903
一共发生了38次gc，其中35次young gc，3次full gc时，young区占用14827K，总大小为19968K，old区占用87518K，总大小为87552K，old区的剩余内存不够young区对象晋升，没有足够内存分配给下一个对象，发生oom异常。依然在第六次young gc时会压缩young区大小，随后young对象不断增加，young区大小也会慢慢增加，大小为初始堆小的76%。观察GC日志可以发现，进一步增大堆的大小，可以减少full gc的次数，可以显著的降低gc时间，使程序的效率更高，这次一共生成对象的次数为19903。再观察heap区，young区中eden区181248K占用率4%，from区61952K占用率99%，to区85504K占用率0%。old区占用了62%。

 5) 2g
java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms2g -Xmx2g -Xloggc:gc-info-Parallel2g-%t.log GCLogAnalysis
执行结束!共生成对象次数:20350
一共发生了15次gc，全部都是young gc，gc时间进一步下降。观察heap，young区中eden、form、to大小都为232960K，比例为1:1:1。old区占用78%。多次执行后生成对象在21000左右浮动，与堆1g时相比，gc时间进一步下降，效率略微提升。young的比例变化不是很清楚。

 6) 4g
java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms4g -Xmx4g -Xloggc:gc-info-Parallel4g-%t.log GCLogAnalysis
执行结束!共生成对象次数:22436
一共发生了5次gc，全部为young gc，gc时间微微下降，提升不明显。观察heap，young区中eden为1048576K，from为174592K，to为174592K。多次执行后生成对象在22000左右浮动，与堆2g时相比，效率略微提升。young的比例变化不是很清楚。

 7）4g 不指定初始堆内存大小
 java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xmx4g -Xloggc:gc-info-Parallel4g2-%t.log GCLogAnalysis
 执行结束!共生成对象次数:22297
 可以看出效率没有受到影响，但是发生了15次gc，12次young gc，3次full gc，gc交替进行，初始young区大小为76288K，随着gc次数不断增大，最大时为1080832K,再下一次gc时略有减少，减少到973312K。程序运行结束。可以看出一开始指定堆大小可以减少gc的次数，也可以推断出在小内存时效果更明显。

2. Serial GC
 1) 128m
java ‐XX:+UseSerialGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms128m -Xmx128m -Xloggc:gc-info-Serial128m-%t.log GCLogAnalysis
发生了oom，一共进行了43次gc，其中8次young gc，35次full gc。
young区初始大小为39296K，前8次都是young gc，young区并没有压缩与扩容，在第8次gc时，同时发生了major gc。接下来的full gc也是效率越来越低，基本上什么都没做，知道发生oom。

 2) 256m
java -XX:+UseSerialGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms256m -Xmx256m -Xloggc:gc-info-Serial256m-%t.log GCLogAnalysis
发生了oom，一共进行了83次gc，其中8次young gc，75次full gc。
young区初始大小为78656KK，前8次都是young gc，young区并没有压缩与扩容，在最后两次young gc时，同时发生了major gc。full gc的效率越来越低直到发生oom。

 3) 512m
java -XX:+UseSerialGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms512m -Xmx512m -Xloggc:gc-info-Serial512m-%t.log GCLogAnalysis
执行结束!共生成对象次数:13534
一共进行了32次gc，其中18次young gc，7次full gc。
相同条件下执行效率比Parallel GC高20%，多次重复执行在12000多，而且heap中young区中eden、from、to的比例并不会变。

 3) 1g
java -XX:+UseSerialGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms1g -Xmx1g -Xloggc:gc-info-Serial1g-%t.log GCLogAnalysis
执行结束!共生成对象次数:18864
一共进行了15次GC，全部为young gc。
gc次数明显减少，其中两次伴有major gc。多次执行，创建对象次数在17700~18864之间浮动。在内存充足的情况，Serial GC的效率就比Parallel的效率要低一些。

····
由于之前工作，而且生病了，作业并没有完全完成。之后补上，但经过这些数据的对比，已经对gc有了大概的认识。之后不影响后续课程的情况下会补上剩下的内容
